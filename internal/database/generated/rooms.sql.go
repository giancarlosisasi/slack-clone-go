// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: rooms.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addUserToRoom = `-- name: AddUserToRoom :exec
INSERT INTO room_members (room_id, user_id)
VALUES ($1, $2)
ON CONFLICT (room_id, user_id) DO NOTHING
`

type AddUserToRoomParams struct {
	RoomID pgtype.UUID
	UserID pgtype.UUID
}

// Adds user to room, ignores if already exists (prevents duplicated)
func (q *Queries) AddUserToRoom(ctx context.Context, arg AddUserToRoomParams) error {
	_, err := q.db.Exec(ctx, addUserToRoom, arg.RoomID, arg.UserID)
	return err
}

const createRoom = `-- name: CreateRoom :one
INSERT INTO rooms (name)
VALUES ($1)
RETURNING id, name, created_at
`

func (q *Queries) CreateRoom(ctx context.Context, name string) (Room, error) {
	row := q.db.QueryRow(ctx, createRoom, name)
	var i Room
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const getAllRooms = `-- name: GetAllRooms :many
SELECT id, name, created_at
FROM rooms
ORDER BY name ASC
`

func (q *Queries) GetAllRooms(ctx context.Context) ([]Room, error) {
	rows, err := q.db.Query(ctx, getAllRooms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoomByID = `-- name: GetRoomByID :one
SELECT id, name, created_at
FROM rooms
WHERE id = $1
`

func (q *Queries) GetRoomByID(ctx context.Context, id pgtype.UUID) (Room, error) {
	row := q.db.QueryRow(ctx, getRoomByID, id)
	var i Room
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const getRoomByName = `-- name: GetRoomByName :one
SELECT id, name, created_at
FROM rooms
WHERE name = $1
`

func (q *Queries) GetRoomByName(ctx context.Context, name string) (Room, error) {
	row := q.db.QueryRow(ctx, getRoomByName, name)
	var i Room
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const getRoomMembers = `-- name: GetRoomMembers :many
SELECT u.id, u.first_name, u.last_name, u.email, u.created_at, u.updated_at, rm.joined_at
FROM room_members rm
JOIN users u ON rm.user_id = u.id
WHERE rm.room_id = $1
ORDER BY rm.joined_at ASC
`

type GetRoomMembersRow struct {
	User     User
	JoinedAt pgtype.Timestamptz
}

// Gets all users in a room with join timestamp
// Uses foreign key indexes automatically
func (q *Queries) GetRoomMembers(ctx context.Context, roomID pgtype.UUID) ([]GetRoomMembersRow, error) {
	rows, err := q.db.Query(ctx, getRoomMembers, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRoomMembersRow
	for rows.Next() {
		var i GetRoomMembersRow
		if err := rows.Scan(
			&i.User.ID,
			&i.User.FirstName,
			&i.User.LastName,
			&i.User.Email,
			&i.User.CreatedAt,
			&i.User.UpdatedAt,
			&i.JoinedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeUserFromRoom = `-- name: RemoveUserFromRoom :exec
DELETE FROM room_members
WHERE room_id = $1 AND user_id = $2
`

type RemoveUserFromRoomParams struct {
	RoomID pgtype.UUID
	UserID pgtype.UUID
}

func (q *Queries) RemoveUserFromRoom(ctx context.Context, arg RemoveUserFromRoomParams) error {
	_, err := q.db.Exec(ctx, removeUserFromRoom, arg.RoomID, arg.UserID)
	return err
}
