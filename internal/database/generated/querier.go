// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type Querier interface {
	// Adds user to room, ignores if already exists (prevents duplicated)
	AddUserToRoom(ctx context.Context, arg AddUserToRoomParams) error
	CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error)
	CreateRoom(ctx context.Context, name string) (Room, error)
	// Created a new user and returns the full user record
	CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error)
	GetAllRooms(ctx context.Context) ([]Room, error)
	GetAllUsers(ctx context.Context) ([]GetAllUsersRow, error)
	// Gets the most recent message in a room (for room previews)
	// Uses same composite index, just LIMIT 1
	GetLatestMessageByRoom(ctx context.Context, roomID pgtype.UUID) (GetLatestMessageByRoomRow, error)
	// For real-time syncing - gets messages after a timestamp
	// Uses name composite index as GetRoomMessages
	// Returns in chronological order
	GetMessagesSince(ctx context.Context, arg GetMessagesSinceParams) ([]GetMessagesSinceRow, error)
	GetRoomByID(ctx context.Context, id pgtype.UUID) (Room, error)
	GetRoomByName(ctx context.Context, name string) (Room, error)
	// Gets all users in a room with join timestamp
	// Uses foreign key indexes automatically
	GetRoomMembers(ctx context.Context, roomID pgtype.UUID) ([]GetRoomMembersRow, error)
	// CRITICAL PERFORMANCE QUERY - Gets recent messages with user info
	// Requires index: CREATE INDEX idx_messages_room_created ON messages(room_id, created_at DESC);
	// this composite index supports both WHERE and ORDER BY clauses
	GetRoomMessages(ctx context.Context, arg GetRoomMessagesParams) ([]GetRoomMessagesRow, error)
	GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error)
	// Fetches user by primary key (fastest lookup)
	GetUserByID(ctx context.Context, id pgtype.UUID) (GetUserByIDRow, error)
	RemoveUserFromRoom(ctx context.Context, arg RemoveUserFromRoomParams) error
}

var _ Querier = (*Queries)(nil)
