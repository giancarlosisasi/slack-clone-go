// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: messages.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (user_id, room_id, content, message_type)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, room_id, content, message_type, created_at, updated_at
`

type CreateMessageParams struct {
	UserID      pgtype.UUID
	RoomID      pgtype.UUID
	Content     string
	MessageType pgtype.Text
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, createMessage,
		arg.UserID,
		arg.RoomID,
		arg.Content,
		arg.MessageType,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RoomID,
		&i.Content,
		&i.MessageType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLatestMessageByRoom = `-- name: GetLatestMessageByRoom :one
SELECT
  m.id,
  m.user_id,
  m.room_id,
  m.content,
  m.message_type,
  m.created_at,
  u.first_name,
  u.last_name
FROM messages m
JOIN users u on m.user_id = u.id
WHERE m.room_id = $1
ORDER BY m.created_at DESC
LIMIT 1
`

type GetLatestMessageByRoomRow struct {
	ID          pgtype.UUID
	UserID      pgtype.UUID
	RoomID      pgtype.UUID
	Content     string
	MessageType pgtype.Text
	CreatedAt   pgtype.Timestamptz
	FirstName   string
	LastName    string
}

// Gets the most recent message in a room (for room previews)
// Uses same composite index, just LIMIT 1
func (q *Queries) GetLatestMessageByRoom(ctx context.Context, roomID pgtype.UUID) (GetLatestMessageByRoomRow, error) {
	row := q.db.QueryRow(ctx, getLatestMessageByRoom, roomID)
	var i GetLatestMessageByRoomRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RoomID,
		&i.Content,
		&i.MessageType,
		&i.CreatedAt,
		&i.FirstName,
		&i.LastName,
	)
	return i, err
}

const getMessagesSince = `-- name: GetMessagesSince :many
SELECT
  m.id,
  m.user_id,
  m.room_id,
  m.content,
  m.message_type,
  m.created_at,
  u.first_name,
  u.last_name
FROM messages m
JOIN users u on m.user_id = u.id
WHERE m.room_id = $1 AND m.created_at > $2
ORDER BY m.created_at DESC
`

type GetMessagesSinceParams struct {
	RoomID    pgtype.UUID
	CreatedAt pgtype.Timestamptz
}

type GetMessagesSinceRow struct {
	ID          pgtype.UUID
	UserID      pgtype.UUID
	RoomID      pgtype.UUID
	Content     string
	MessageType pgtype.Text
	CreatedAt   pgtype.Timestamptz
	FirstName   string
	LastName    string
}

// For real-time syncing - gets messages after a timestamp
// Uses name composite index as GetRoomMessages
// Returns in chronological order
func (q *Queries) GetMessagesSince(ctx context.Context, arg GetMessagesSinceParams) ([]GetMessagesSinceRow, error) {
	rows, err := q.db.Query(ctx, getMessagesSince, arg.RoomID, arg.CreatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMessagesSinceRow
	for rows.Next() {
		var i GetMessagesSinceRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.RoomID,
			&i.Content,
			&i.MessageType,
			&i.CreatedAt,
			&i.FirstName,
			&i.LastName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoomMessages = `-- name: GetRoomMessages :many
SELECT
  m.id,
  m.user_id,
  m.room_id,
  m.content,
  m.message_type,
  m.created_at,
  u.first_name,
  u.last_name
FROM messages m
JOIN users u on m.user_id = u.id
WHERE m.room_id = $1
ORDER BY m.created_at DESC
LIMIT $2
`

type GetRoomMessagesParams struct {
	RoomID pgtype.UUID
	Limit  int32
}

type GetRoomMessagesRow struct {
	ID          pgtype.UUID
	UserID      pgtype.UUID
	RoomID      pgtype.UUID
	Content     string
	MessageType pgtype.Text
	CreatedAt   pgtype.Timestamptz
	FirstName   string
	LastName    string
}

// CRITICAL PERFORMANCE QUERY - Gets recent messages with user info
// Requires index: CREATE INDEX idx_messages_room_created ON messages(room_id, created_at DESC);
// this composite index supports both WHERE and ORDER BY clauses
func (q *Queries) GetRoomMessages(ctx context.Context, arg GetRoomMessagesParams) ([]GetRoomMessagesRow, error) {
	rows, err := q.db.Query(ctx, getRoomMessages, arg.RoomID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRoomMessagesRow
	for rows.Next() {
		var i GetRoomMessagesRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.RoomID,
			&i.Content,
			&i.MessageType,
			&i.CreatedAt,
			&i.FirstName,
			&i.LastName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
